version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: gitflow-postgres
    environment:
      POSTGRES_DB: gitflow_analytics
      POSTGRES_USER: gitflow_user
      POSTGRES_PASSWORD: gitflow_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gitflow_user -d gitflow_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: gitflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gitflow-backend
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://gitflow_user:gitflow_password@postgres:5432/gitflow_analytics
      REDIS_URL: redis://redis:6379
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      ML_API_URL: http://ml-pipeline:5000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules

  ml-pipeline:
    build:
      context: ./ml-pipeline
      dockerfile: Dockerfile
    container_name: gitflow-ml
    ports:
      - "5000:5000"
    environment:
      PYTHONUNBUFFERED: 1
      MODEL_PATH: /app/models
      CACHE_DIR: /app/data/cache
    volumes:
      - ./ml-pipeline:/app
      - ml-models:/app/models

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:3001
    container_name: gitflow-frontend
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres-data:
  redis-data:
  ml-models:
